# This file was originally auto-generated by O2 with contents hashing to 15000779b14e32f601e9851160ab311f
use strict;

use Test::More qw(no_plan);
use O2::Script::Test::Common;

use_ok 'O2Plugin::Shop::Mgr::PeriodProductManager';

use O2 qw($context $config);

my @localeCodes = @{ $config->get('o2.locales') };
my $mgr = $context->getSingleton('O2Plugin::Shop::Mgr::PeriodProductManager');

my $newObj = $mgr->newObject();
$newObj->setMetaName('Test-script for O2Plugin::Shop::Obj::PeriodProduct/O2Plugin::Shop::Mgr::PeriodProductManager');
$newObj->setMetaStatus("Test-varchar");
$newObj->setMetaParentId( getTestObjectId() );
$newObj->setKeywordIds( getTestObjectId(), getTestObjectId() );
$newObj->setMetaOwnerId( getTestObjectId() );
$newObj->setMetaName("Test-varchar");
$newObj->setIncludedProductIds('a' => '1', 'b' => '2', );
$newObj->setPriceIncVat(1.1);
$newObj->setDefaultPriceExVat(1.1);
$newObj->setImageIds( getTestObjectId(), getTestObjectId() );
$newObj->setLinks('a' => 'one', 'b' => 'two', );
$newObj->setAssociatedProductIds( getTestObjectId(), getTestObjectId() );
$newObj->setIsActive(1);
$newObj->setProductId("Test-varchar");
$newObj->setProductTypeId($newObj->getManager()->getTestProductTypeId());
$newObj->setAttributes('a' => 'one', 'b' => 'two', );
$newObj->setValidityPeriodIds( getTestObjectId(), getTestObjectId() );
$newObj->setCalendarId( getTestObjectId() );

foreach my $localeCode (@localeCodes) {
  $newObj->setCurrentLocale($localeCode);
  $newObj->setSummary("Test-text ($localeCode)");
  $newObj->setName("Test-varchar ($localeCode)");
  $newObj->setDescription("Test-text ($localeCode)");
}
$newObj->save();

ok($newObj->getId() > 0, 'Object saved ok');

my $dbObj = $context->getObjectById( $newObj->getId() );
ok($dbObj, 'getObjectById returned something') or BAIL_OUT("Couldn't get object from database");

is( $dbObj->getMetaClassName(), $newObj->getMetaClassName(), 'metaClassName retrieved ok.' );
is( $dbObj->getMetaStatus(), $newObj->getMetaStatus(), 'metaStatus retrieved ok.' );
is( $dbObj->getMetaParentId(), $newObj->getMetaParentId(), 'metaParentId retrieved ok.' );
is_deeply( [ $dbObj->getKeywordIds() ], [ $newObj->getKeywordIds() ], 'keywordIds retrieved ok.' );
is( $dbObj->getMetaCreateTime(), $newObj->getMetaCreateTime(), 'metaCreateTime retrieved ok.' );
is( $dbObj->getId(), $newObj->getId(), 'id retrieved ok.' );
is( $dbObj->getMetaChangeTime(), $newObj->getMetaChangeTime(), 'metaChangeTime retrieved ok.' );
is( $dbObj->getMetaOwnerId(), $newObj->getMetaOwnerId(), 'metaOwnerId retrieved ok.' );
is( $dbObj->getMetaName(), $newObj->getMetaName(), 'metaName retrieved ok.' );
is_deeply( { $dbObj->getIncludedProductIds() }, { $newObj->getIncludedProductIds() }, 'includedProductIds retrieved ok.' );
cmp_ok( $dbObj->getPriceIncVat(), '==', $newObj->getPriceIncVat(), 'priceIncVat retrieved ok.' );
cmp_ok( $dbObj->getDefaultPriceExVat(), '==', $newObj->getDefaultPriceExVat(), 'defaultPriceExVat retrieved ok.' );
is_deeply( [ $dbObj->getImageIds() ], [ $newObj->getImageIds() ], 'imageIds retrieved ok.' );
is_deeply( { $dbObj->getLinks() }, { $newObj->getLinks() }, 'links retrieved ok.' );
is_deeply( [ $dbObj->getAssociatedProductIds() ], [ $newObj->getAssociatedProductIds() ], 'associatedProductIds retrieved ok.' );
is( $dbObj->getIsActive(), $newObj->getIsActive(), 'isActive retrieved ok.' );
is( $dbObj->getProductId(), $newObj->getProductId(), 'productId retrieved ok.' );
is( $dbObj->getProductTypeId(), $newObj->getProductTypeId(), 'productTypeId retrieved ok.' );
is_deeply( { $dbObj->getAttributes() }, { $newObj->getAttributes() }, 'attributes retrieved ok.' );
is_deeply( [ $dbObj->getValidityPeriodIds() ], [ $newObj->getValidityPeriodIds() ], 'validityPeriodIds retrieved ok.' );
is( $dbObj->getCalendarId(), $newObj->getCalendarId(), 'calendarId retrieved ok.' );
foreach my $localeCode (@localeCodes) {
  $newObj->setCurrentLocale($localeCode);
  $dbObj->setCurrentLocale($localeCode);
  is( $dbObj->getSummary(), $newObj->getSummary(), 'summary retrieved ok.' );
  is( $dbObj->getName(), $newObj->getName(), 'name retrieved ok.' );
  is( $dbObj->getDescription(), $newObj->getDescription(), 'description retrieved ok.' );
}

# See if a simple object search works
my @searchResults = $mgr->objectSearch( objectId => $newObj->getId() );
is($searchResults[0]->getId(), $newObj->getId(), 'Search for objectId ok');

END {
  $newObj->deletePermanently() if $newObj;
  deleteTestObjects();
}
